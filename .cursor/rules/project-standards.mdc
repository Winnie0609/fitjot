---
description: Project standards for Workout Log - Tech stack, icons, UI components, and coding patterns
globs: ['**/*']
alwaysApply: true
---

# Cursor Rules for Workout Log Project

## Tech Stack

- Next.js 15 with React 19
- TypeScript
- Tailwind CSS v4
- shadcn/ui components
- Lucide React icons
- pnpm as package manager

## Icon Guidelines

- Use Lucide React icons exclusively: `import { IconName } from "lucide-react"`
- Common icons to use:
  - `Plus`, `Minus` for add/remove actions
  - `Edit`, `Trash2` for edit/delete actions
  - `Save`, `X` for save/cancel actions
  - `ChevronDown`, `ChevronUp`, `ChevronLeft`, `ChevronRight` for navigation
  - `Calendar`, `Clock` for dates/time
  - `User`, `Settings` for user/settings
  - `Search`, `Filter` for search/filter functionality
  - `Dumbbell`, `Activity`, `TrendingUp` for workout-related icons
- Always use semantic icon names that match their purpose
- Prefer outline icons over filled variants for consistency

## UI Component Guidelines

- Use shadcn/ui components from `@/components/ui/`
- Import pattern: `import { Button } from "@/components/ui/button"`
- Available components based on standard shadcn/ui:
  - Button, Input, Label, Textarea
  - Card, CardHeader, CardTitle, CardContent, CardFooter
  - Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle
  - Form, FormField, FormItem, FormLabel, FormControl, FormMessage
  - Select, SelectTrigger, SelectValue, SelectContent, SelectItem
  - Badge, Avatar, Separator
  - Table, TableHeader, TableBody, TableRow, TableHead, TableCell
  - Toast, Skeleton, Progress
- Always use the pre-configured components rather than building custom ones
- Follow the New York style variant (as configured)

## Component Structure

- Use functional components with TypeScript
- Prefer composition over prop drilling
- Use proper TypeScript interfaces for props
- Follow this import order:
  1. React imports
  2. Next.js imports
  3. Third-party libraries
  4. shadcn/ui components
  5. Lucide icons
  6. Local components and utilities

## Styling Guidelines

- Use Tailwind CSS v4 classes
- Prefer utility classes over custom CSS
- Use CSS variables for theming (configured in globals.css)
- Follow mobile-first responsive design
- Use semantic color classes: primary, secondary, destructive, muted, accent

## File Organization

- Components in `/components/` directory
- UI components in `/components/ui/` (shadcn/ui)
- Utilities in `/lib/` directory
- Use absolute imports with `@/` prefix

## Code Patterns

- Use `cn()` utility for conditional classes: `import { cn } from "@/lib/utils"`
- Prefer server components by default, use "use client" only when needed
- Use TypeScript strict mode
- Follow Next.js App Router patterns

## Package Management

- Use pnpm for all package operations:
  - `pnpm install` - install dependencies
  - `pnpm add <package>` - add new dependency
  - `pnpm dev` - start development server
  - `pnpm build` - build for production
  - `pnpm lint` - run linting
- Never use npm or yarn commands in this project
- Project uses pnpm-lock.yaml for dependency locking

## Example Component Structure

```tsx
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Plus, Edit } from 'lucide-react';
import { cn } from '@/lib/utils';

interface ComponentProps {
  className?: string;
  // other props
}

export function Component({ className, ...props }: ComponentProps) {
  return (
    <Card className={cn('w-full', className)}>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Plus className="h-4 w-4" />
          Title
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Button>
          <Edit className="h-4 w-4 mr-2" />
          Action
        </Button>
      </CardContent>
    </Card>
  );
}
```
